// Code generated by protoc-gen-go.
// source: kaede/grpc/kaede.proto
// DO NOT EDIT!

/*
Package kaede_grpc is a generated protocol buffer package.

It is generated from these files:
	kaede/grpc/kaede.proto

It has these top-level messages:
	SchedulerReloadInput
	SchedulerReloadOutput
	SchedulerStopInput
	SchedulerStopOutput
	GetProgramsInput
	GetProgramsOutput
	AddTidInput
	AddTidOutput
	UpdateInput
	UpdateOutput
	AddChannelInput
	AddChannelOutput
	Program
*/
package kaede_grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SchedulerReloadInput struct {
}

func (m *SchedulerReloadInput) Reset()                    { *m = SchedulerReloadInput{} }
func (m *SchedulerReloadInput) String() string            { return proto.CompactTextString(m) }
func (*SchedulerReloadInput) ProtoMessage()               {}
func (*SchedulerReloadInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SchedulerReloadOutput struct {
}

func (m *SchedulerReloadOutput) Reset()                    { *m = SchedulerReloadOutput{} }
func (m *SchedulerReloadOutput) String() string            { return proto.CompactTextString(m) }
func (*SchedulerReloadOutput) ProtoMessage()               {}
func (*SchedulerReloadOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SchedulerStopInput struct {
}

func (m *SchedulerStopInput) Reset()                    { *m = SchedulerStopInput{} }
func (m *SchedulerStopInput) String() string            { return proto.CompactTextString(m) }
func (*SchedulerStopInput) ProtoMessage()               {}
func (*SchedulerStopInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type SchedulerStopOutput struct {
}

func (m *SchedulerStopOutput) Reset()                    { *m = SchedulerStopOutput{} }
func (m *SchedulerStopOutput) String() string            { return proto.CompactTextString(m) }
func (*SchedulerStopOutput) ProtoMessage()               {}
func (*SchedulerStopOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type GetProgramsInput struct {
}

func (m *GetProgramsInput) Reset()                    { *m = GetProgramsInput{} }
func (m *GetProgramsInput) String() string            { return proto.CompactTextString(m) }
func (*GetProgramsInput) ProtoMessage()               {}
func (*GetProgramsInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type GetProgramsOutput struct {
	Programs []*Program `protobuf:"bytes,1,rep,name=programs" json:"programs,omitempty"`
}

func (m *GetProgramsOutput) Reset()                    { *m = GetProgramsOutput{} }
func (m *GetProgramsOutput) String() string            { return proto.CompactTextString(m) }
func (*GetProgramsOutput) ProtoMessage()               {}
func (*GetProgramsOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetProgramsOutput) GetPrograms() []*Program {
	if m != nil {
		return m.Programs
	}
	return nil
}

type AddTidInput struct {
	Tid uint32 `protobuf:"varint,1,opt,name=tid" json:"tid,omitempty"`
}

func (m *AddTidInput) Reset()                    { *m = AddTidInput{} }
func (m *AddTidInput) String() string            { return proto.CompactTextString(m) }
func (*AddTidInput) ProtoMessage()               {}
func (*AddTidInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type AddTidOutput struct {
	Tid   uint32 `protobuf:"varint,1,opt,name=tid" json:"tid,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (m *AddTidOutput) Reset()                    { *m = AddTidOutput{} }
func (m *AddTidOutput) String() string            { return proto.CompactTextString(m) }
func (*AddTidOutput) ProtoMessage()               {}
func (*AddTidOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type UpdateInput struct {
}

func (m *UpdateInput) Reset()                    { *m = UpdateInput{} }
func (m *UpdateInput) String() string            { return proto.CompactTextString(m) }
func (*UpdateInput) ProtoMessage()               {}
func (*UpdateInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type UpdateOutput struct {
}

func (m *UpdateOutput) Reset()                    { *m = UpdateOutput{} }
func (m *UpdateOutput) String() string            { return proto.CompactTextString(m) }
func (*UpdateOutput) ProtoMessage()               {}
func (*UpdateOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type AddChannelInput struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Recorder uint32 `protobuf:"varint,2,opt,name=recorder" json:"recorder,omitempty"`
	Syoboi   uint32 `protobuf:"varint,3,opt,name=syoboi" json:"syoboi,omitempty"`
}

func (m *AddChannelInput) Reset()                    { *m = AddChannelInput{} }
func (m *AddChannelInput) String() string            { return proto.CompactTextString(m) }
func (*AddChannelInput) ProtoMessage()               {}
func (*AddChannelInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type AddChannelOutput struct {
}

func (m *AddChannelOutput) Reset()                    { *m = AddChannelOutput{} }
func (m *AddChannelOutput) String() string            { return proto.CompactTextString(m) }
func (*AddChannelOutput) ProtoMessage()               {}
func (*AddChannelOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type Program struct {
	Pid                uint32                     `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	Tid                uint32                     `protobuf:"varint,2,opt,name=tid" json:"tid,omitempty"`
	StartTime          *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime            *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	ChannelName        string                     `protobuf:"bytes,5,opt,name=channel_name,json=channelName" json:"channel_name,omitempty"`
	ChannelForSyoboi   uint32                     `protobuf:"varint,6,opt,name=channel_for_syoboi,json=channelForSyoboi" json:"channel_for_syoboi,omitempty"`
	ChannelForRecorder uint32                     `protobuf:"varint,7,opt,name=channel_for_recorder,json=channelForRecorder" json:"channel_for_recorder,omitempty"`
	Count              string                     `protobuf:"bytes,8,opt,name=count" json:"count,omitempty"`
	StartOffset        int32                      `protobuf:"varint,9,opt,name=start_offset,json=startOffset" json:"start_offset,omitempty"`
	Subtitle           string                     `protobuf:"bytes,10,opt,name=subtitle" json:"subtitle,omitempty"`
	Title              string                     `protobuf:"bytes,11,opt,name=title" json:"title,omitempty"`
	Comment            string                     `protobuf:"bytes,12,opt,name=comment" json:"comment,omitempty"`
	EnqueuedAt         *google_protobuf.Timestamp `protobuf:"bytes,13,opt,name=enqueued_at,json=enqueuedAt" json:"enqueued_at,omitempty"`
}

func (m *Program) Reset()                    { *m = Program{} }
func (m *Program) String() string            { return proto.CompactTextString(m) }
func (*Program) ProtoMessage()               {}
func (*Program) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Program) GetStartTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Program) GetEndTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *Program) GetEnqueuedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.EnqueuedAt
	}
	return nil
}

func init() {
	proto.RegisterType((*SchedulerReloadInput)(nil), "kaede.grpc.SchedulerReloadInput")
	proto.RegisterType((*SchedulerReloadOutput)(nil), "kaede.grpc.SchedulerReloadOutput")
	proto.RegisterType((*SchedulerStopInput)(nil), "kaede.grpc.SchedulerStopInput")
	proto.RegisterType((*SchedulerStopOutput)(nil), "kaede.grpc.SchedulerStopOutput")
	proto.RegisterType((*GetProgramsInput)(nil), "kaede.grpc.GetProgramsInput")
	proto.RegisterType((*GetProgramsOutput)(nil), "kaede.grpc.GetProgramsOutput")
	proto.RegisterType((*AddTidInput)(nil), "kaede.grpc.AddTidInput")
	proto.RegisterType((*AddTidOutput)(nil), "kaede.grpc.AddTidOutput")
	proto.RegisterType((*UpdateInput)(nil), "kaede.grpc.UpdateInput")
	proto.RegisterType((*UpdateOutput)(nil), "kaede.grpc.UpdateOutput")
	proto.RegisterType((*AddChannelInput)(nil), "kaede.grpc.AddChannelInput")
	proto.RegisterType((*AddChannelOutput)(nil), "kaede.grpc.AddChannelOutput")
	proto.RegisterType((*Program)(nil), "kaede.grpc.Program")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Scheduler service

type SchedulerClient interface {
	Reload(ctx context.Context, in *SchedulerReloadInput, opts ...grpc.CallOption) (*SchedulerReloadOutput, error)
	Stop(ctx context.Context, in *SchedulerStopInput, opts ...grpc.CallOption) (*SchedulerStopOutput, error)
	GetPrograms(ctx context.Context, in *GetProgramsInput, opts ...grpc.CallOption) (*GetProgramsOutput, error)
	AddTid(ctx context.Context, in *AddTidInput, opts ...grpc.CallOption) (*AddTidOutput, error)
	Update(ctx context.Context, in *UpdateInput, opts ...grpc.CallOption) (*UpdateOutput, error)
	AddChannel(ctx context.Context, in *AddChannelInput, opts ...grpc.CallOption) (*AddChannelOutput, error)
}

type schedulerClient struct {
	cc *grpc.ClientConn
}

func NewSchedulerClient(cc *grpc.ClientConn) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) Reload(ctx context.Context, in *SchedulerReloadInput, opts ...grpc.CallOption) (*SchedulerReloadOutput, error) {
	out := new(SchedulerReloadOutput)
	err := grpc.Invoke(ctx, "/kaede.grpc.Scheduler/Reload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) Stop(ctx context.Context, in *SchedulerStopInput, opts ...grpc.CallOption) (*SchedulerStopOutput, error) {
	out := new(SchedulerStopOutput)
	err := grpc.Invoke(ctx, "/kaede.grpc.Scheduler/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) GetPrograms(ctx context.Context, in *GetProgramsInput, opts ...grpc.CallOption) (*GetProgramsOutput, error) {
	out := new(GetProgramsOutput)
	err := grpc.Invoke(ctx, "/kaede.grpc.Scheduler/GetPrograms", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) AddTid(ctx context.Context, in *AddTidInput, opts ...grpc.CallOption) (*AddTidOutput, error) {
	out := new(AddTidOutput)
	err := grpc.Invoke(ctx, "/kaede.grpc.Scheduler/AddTid", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) Update(ctx context.Context, in *UpdateInput, opts ...grpc.CallOption) (*UpdateOutput, error) {
	out := new(UpdateOutput)
	err := grpc.Invoke(ctx, "/kaede.grpc.Scheduler/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) AddChannel(ctx context.Context, in *AddChannelInput, opts ...grpc.CallOption) (*AddChannelOutput, error) {
	out := new(AddChannelOutput)
	err := grpc.Invoke(ctx, "/kaede.grpc.Scheduler/AddChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Scheduler service

type SchedulerServer interface {
	Reload(context.Context, *SchedulerReloadInput) (*SchedulerReloadOutput, error)
	Stop(context.Context, *SchedulerStopInput) (*SchedulerStopOutput, error)
	GetPrograms(context.Context, *GetProgramsInput) (*GetProgramsOutput, error)
	AddTid(context.Context, *AddTidInput) (*AddTidOutput, error)
	Update(context.Context, *UpdateInput) (*UpdateOutput, error)
	AddChannel(context.Context, *AddChannelInput) (*AddChannelOutput, error)
}

func RegisterSchedulerServer(s *grpc.Server, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulerReloadInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaede.grpc.Scheduler/Reload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Reload(ctx, req.(*SchedulerReloadInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulerStopInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaede.grpc.Scheduler/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Stop(ctx, req.(*SchedulerStopInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_GetPrograms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProgramsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).GetPrograms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaede.grpc.Scheduler/GetPrograms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).GetPrograms(ctx, req.(*GetProgramsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_AddTid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTidInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).AddTid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaede.grpc.Scheduler/AddTid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).AddTid(ctx, req.(*AddTidInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaede.grpc.Scheduler/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Update(ctx, req.(*UpdateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_AddChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChannelInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).AddChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaede.grpc.Scheduler/AddChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).AddChannel(ctx, req.(*AddChannelInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kaede.grpc.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Reload",
			Handler:    _Scheduler_Reload_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Scheduler_Stop_Handler,
		},
		{
			MethodName: "GetPrograms",
			Handler:    _Scheduler_GetPrograms_Handler,
		},
		{
			MethodName: "AddTid",
			Handler:    _Scheduler_AddTid_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Scheduler_Update_Handler,
		},
		{
			MethodName: "AddChannel",
			Handler:    _Scheduler_AddChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("kaede/grpc/kaede.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 605 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x25, 0xcd, 0xf7, 0x38, 0x81, 0x30, 0x4d, 0x53, 0xcb, 0x14, 0x92, 0xe6, 0x94, 0x03, 0x72,
	0x50, 0x10, 0x48, 0x08, 0x71, 0x88, 0x40, 0xa0, 0x4a, 0x88, 0x20, 0xa7, 0x1c, 0x38, 0x45, 0x8e,
	0x77, 0x93, 0x5a, 0xc4, 0x5e, 0x63, 0xaf, 0x0f, 0xfc, 0x39, 0x7e, 0x0d, 0x3f, 0x04, 0xed, 0x87,
	0x3f, 0x92, 0xa6, 0xed, 0x6d, 0xe7, 0xcd, 0x9b, 0xd9, 0x9d, 0xb7, 0xf3, 0x60, 0xf0, 0xcb, 0xa5,
	0x84, 0x4e, 0xb7, 0x71, 0xe4, 0x4d, 0xe5, 0xd1, 0x8e, 0x62, 0xc6, 0x19, 0x82, 0x0a, 0x04, 0x6e,
	0x0d, 0xb7, 0x8c, 0x6d, 0x77, 0x74, 0x2a, 0x33, 0xeb, 0x74, 0x33, 0xe5, 0x7e, 0x40, 0x13, 0xee,
	0x06, 0x91, 0x22, 0x8f, 0x07, 0xd0, 0x5f, 0x7a, 0x37, 0x94, 0xa4, 0x3b, 0x1a, 0x3b, 0x74, 0xc7,
	0x5c, 0x72, 0x15, 0x46, 0x29, 0x1f, 0x9f, 0xc3, 0xd9, 0x01, 0xbe, 0x48, 0xb9, 0x48, 0xf4, 0x01,
	0xf3, 0xc4, 0x92, 0xb3, 0x48, 0xd1, 0xcf, 0xe0, 0x74, 0x0f, 0xd5, 0x64, 0x84, 0xde, 0x17, 0xca,
	0xbf, 0xc7, 0x6c, 0x1b, 0xbb, 0x41, 0xa2, 0xa8, 0x9f, 0xe0, 0x69, 0x09, 0x53, 0x44, 0x9c, 0x42,
	0x2b, 0xd2, 0x88, 0x59, 0x19, 0x55, 0x27, 0xc6, 0xec, 0xd4, 0x2e, 0xc6, 0xb0, 0x35, 0xdb, 0xc9,
	0x49, 0xe3, 0x21, 0x18, 0x73, 0x42, 0xae, 0x7d, 0xf5, 0x5c, 0xec, 0x41, 0x95, 0xfb, 0xc4, 0xac,
	0x8c, 0x2a, 0x93, 0xae, 0x23, 0x8e, 0xe3, 0xb7, 0xd0, 0x51, 0x04, 0x7d, 0xc3, 0x2d, 0x06, 0xf6,
	0xa1, 0xce, 0x7d, 0xbe, 0xa3, 0xe6, 0xc9, 0xa8, 0x32, 0x69, 0x3b, 0x2a, 0x18, 0x77, 0xc1, 0xf8,
	0x11, 0x11, 0x97, 0x53, 0xf5, 0xda, 0xc7, 0xd0, 0x51, 0xa1, 0x9e, 0xe8, 0x27, 0x3c, 0x99, 0x13,
	0xf2, 0xf1, 0xc6, 0x0d, 0x43, 0xba, 0x53, 0x77, 0x23, 0xd4, 0x42, 0x37, 0xa0, 0xb2, 0x75, 0xdb,
	0x91, 0x67, 0xb4, 0xa0, 0x15, 0x53, 0x8f, 0xc5, 0x84, 0xc6, 0xb2, 0x7d, 0xd7, 0xc9, 0x63, 0x1c,
	0x40, 0x23, 0xf9, 0xc3, 0xd6, 0xcc, 0x37, 0xab, 0x32, 0xa3, 0x23, 0x21, 0x56, 0xd1, 0x5a, 0x5f,
	0xf7, 0xaf, 0x0a, 0x4d, 0x3d, 0xbc, 0x98, 0x20, 0x2a, 0x26, 0x88, 0x7c, 0x92, 0xcd, 0x74, 0x52,
	0xcc, 0xf4, 0x0e, 0x20, 0xe1, 0x6e, 0xcc, 0x57, 0xe2, 0x9f, 0x65, 0x7f, 0x63, 0x66, 0xd9, 0x6a,
	0x09, 0xec, 0x6c, 0x09, 0xec, 0xeb, 0x6c, 0x09, 0x9c, 0xb6, 0x64, 0x8b, 0x18, 0xdf, 0x40, 0x8b,
	0x86, 0x44, 0x15, 0xd6, 0x1e, 0x2c, 0x6c, 0xd2, 0x90, 0xc8, 0xb2, 0x4b, 0xe8, 0x78, 0xea, 0xc9,
	0x2b, 0xa9, 0x42, 0x5d, 0xaa, 0x60, 0x68, 0xec, 0x9b, 0x10, 0xe3, 0x25, 0x60, 0x46, 0xd9, 0xb0,
	0x78, 0xa5, 0x87, 0x6f, 0xc8, 0x57, 0xf7, 0x74, 0xe6, 0x33, 0x8b, 0x97, 0x12, 0xc7, 0x57, 0xd0,
	0x2f, 0xb3, 0x73, 0x19, 0x9b, 0x92, 0x8f, 0x05, 0xdf, 0xc9, 0x04, 0xed, 0x43, 0xdd, 0x63, 0x69,
	0xc8, 0xcd, 0x96, 0xfa, 0x48, 0x19, 0x88, 0x87, 0x29, 0x29, 0xd8, 0x66, 0x93, 0x50, 0x6e, 0xb6,
	0x47, 0x95, 0x49, 0xdd, 0x31, 0x24, 0xb6, 0x90, 0x90, 0xf8, 0xa5, 0x24, 0x5d, 0xab, 0x25, 0x00,
	0x59, 0x9b, 0xc7, 0xc5, 0x76, 0x18, 0xa5, 0xed, 0x40, 0x13, 0x9a, 0x1e, 0x0b, 0x02, 0x1a, 0x72,
	0xb3, 0x23, 0xf1, 0x2c, 0xc4, 0xf7, 0x60, 0xd0, 0xf0, 0x77, 0x4a, 0x53, 0x4a, 0x56, 0x2e, 0x37,
	0xbb, 0x0f, 0x2a, 0x08, 0x19, 0x7d, 0xce, 0x67, 0x7f, 0xab, 0xd0, 0xce, 0xfd, 0x83, 0x0b, 0x68,
	0x28, 0xcb, 0xe1, 0xa8, 0x6c, 0x82, 0x63, 0x3e, 0xb5, 0x2e, 0xef, 0x61, 0xe8, 0x1d, 0x7a, 0x84,
	0x57, 0x50, 0x13, 0xa6, 0xc4, 0x17, 0x47, 0xc9, 0xb9, 0x8b, 0xad, 0xe1, 0x9d, 0xf9, 0xbc, 0xd5,
	0x57, 0x30, 0x4a, 0xee, 0xc5, 0x8b, 0x72, 0xc5, 0xa1, 0xd5, 0xad, 0xe7, 0x77, 0x64, 0xf3, 0x6e,
	0x1f, 0xa0, 0xa1, 0x4c, 0x8a, 0xe7, 0x65, 0x6a, 0xc9, 0xd9, 0x96, 0x79, 0x3b, 0x51, 0x2e, 0x57,
	0xe6, 0xdc, 0x2f, 0x2f, 0xf9, 0x77, 0xbf, 0x7c, 0xcf, 0xc9, 0x42, 0x16, 0x28, 0x0c, 0x87, 0xcf,
	0x0e, 0x2e, 0x2a, 0x7b, 0xdc, 0xba, 0x38, 0x9e, 0xcc, 0x5a, 0xad, 0x1b, 0xf2, 0x83, 0x5f, 0xff,
	0x0f, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x18, 0x02, 0xe5, 0x94, 0x05, 0x00, 0x00,
}
